import{Q as u}from"./QSelect.798f4c29.js";import{d as i,h as d,x as c,r as n,m as y,as as f,o as v,c as T,u as s}from"./index.be381c74.js";import{c as I}from"./validators.06a91c63.js";import"./QChip.b09f7661.js";import"./QItemSection.770ba61d.js";import"./QMenu.e34ad327.js";import"./selection.bf98fb9b.js";import"./format.3e32b8d9.js";const V=i({__name:"MeasurementTypeSelect",setup(g){const{log:l}=d(),e=c(),o=n(null),m=n([]);y(async()=>{try{m.value=Object.values(f),e.temporaryItem.measurementType=e.selectedItem.measurementType?e.selectedItem.measurementType:m.value[0],e.validateItem.measurementType=!0}catch(t){l.error("MeasurementTypeSelect:onMounted",t)}});function p(){var t;e.validateItem.measurementType=!!((t=o==null?void 0:o.value)!=null&&t.validate())}return(t,r)=>(v(),T(s(u),{modelValue:s(e).temporaryItem.measurementType,"onUpdate:modelValue":r[0]||(r[0]=a=>s(e).temporaryItem.measurementType=a),ref_key:"inputRef",ref:o,label:"Type",options:m.value,rules:[a=>s(I)(a)||"* Required"],"emit-value":"","map-options":"","options-dense":"",dense:"",outlined:"",color:"primary",class:"q-mb-xs",onBlur:r[1]||(r[1]=a=>p())},null,8,["modelValue","options","rules"]))}});export{V as default};
