import{Q as u}from"./QSelect.18e6223a.js";import{d as i,h as d,x as y,r as n,m as c,ar as f,o as v,c as T,u as m}from"./index.9af118fa.js";import{b as I}from"./validators.13905387.js";import"./QChip.3db16647.js";import"./QItemSection.fc109ee5.js";import"./QMenu.4574d459.js";import"./selection.7faee8f5.js";import"./format.3e32b8d9.js";const V=i({__name:"MeasurementTypeSelect",setup(g){const{log:l}=d(),e=y(),o=n(null),s=n([]);c(async()=>{try{s.value=Object.values(f),e.temporaryItem.measurementType=e.selectedItem.measurementType?e.selectedItem.measurementType:s.value[0],e.validateItem.measurementType=!0}catch(t){l.error("MeasurementTypeSelect:onMounted",t)}});function p(){var t;e.validateItem.measurementType=!!((t=o==null?void 0:o.value)!=null&&t.validate())}return(t,r)=>(v(),T(m(u),{modelValue:m(e).temporaryItem.measurementType,"onUpdate:modelValue":r[0]||(r[0]=a=>m(e).temporaryItem.measurementType=a),ref_key:"inputRef",ref:o,label:"Type",options:s.value,rules:[a=>m(I)(a)||"* Required"],"emit-value":"","map-options":"","options-dense":"",dense:"",outlined:"",color:"primary",class:"q-mb-xs",onBlur:r[1]||(r[1]=a=>p())},null,8,["modelValue","options","rules"]))}});export{V as default};
